# AI Quizzer API

A backend service for an AI-powered quiz application that generates quizzes, evaluates responses, provides hints, and allows retrying quizzes.

## Features

- **Authentication** - Mock authentication with JWT
- **Quiz Generation** - AI-generated quizzes using Groq
- **Quiz Submission** - Submit and evaluate quiz answers
- **Quiz History** - View past quizzes with filtering options
- **Question Hints** - Get AI-generated hints for questions
- **Quiz Retry** - Retry quizzes while preserving previous attempts
- **Submission History** - View all previous quiz submissions
- **Email Notifications** - Send quiz results via email with AI-generated improvement suggestions
- **Database Support** - Works with both MongoDB and SQL databases
- **Redis Caching** - Improved performance with Redis caching

## Setup Instructions

### Local Development Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd ai-quizzer
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Set up environment variables**
   
   Create a `.env` file in the root directory with the following variables:
   ```env
   # Database Configuration (Choose MongoDB or SQL)
   DB_TYPE=mongo           # 'mongo' or 'sql'
   MONGO_URI=mongodb://localhost:27017/ai_quizzer
   SQL_URI=postgresql://postgres:postgres@localhost:5432/ai_quizzer

   # Authentication
   JWT_SECRET=your-secret-key

   # Caching
   REDIS_URL=redis://localhost:6379

   # AI Service
   GROQ_API_KEY=your-groq-api-key

   # Email Configuration
   EMAIL_HOST=smtp.gmail.com
   EMAIL_PORT=587
   EMAIL_SECURE=false
   EMAIL_USER=your-email@gmail.com
   EMAIL_PASS=your-app-password
   EMAIL_FROM="AI Quizzer <your-email@gmail.com>"
   ```

4. **Database Setup**

   **For MongoDB:**
   - Install MongoDB locally or use MongoDB Atlas
   - Set `DB_TYPE=mongo` in your .env file

   **For SQL (PostgreSQL):**
   - Install PostgreSQL locally
   - Create a database named `ai_quizzer`
   - Initialize the database with the SQL schema:
     ```bash
     psql -U postgres -d ai_quizzer -f sql/00_schema.sql
     ```
   - Optionally, load sample data:
     ```bash
     psql -U postgres -d ai_quizzer -f sql/01_seed.sql
     ```
   - Set `DB_TYPE=sql` in your .env file

5. **Start Redis server (optional)**
   
   The system will automatically fall back to in-memory cache if Redis is unavailable.
   ```bash
   # Install Redis if not already installed
   # On MacOS with Homebrew:
   brew install redis
   
   # Start Redis server
   redis-server
   ```

6. **Run the server**
   ```bash
   npm run dev  # Development mode with nodemon
   npm start    # Production mode
   ```

7. **Access the API**
   
   The API will be available at `http://localhost:3000`

### Docker Setup (Recommended)

For easy deployment with all dependencies, use Docker Compose:

1. **Set up environment variables**
   
   Create a `.env` file with the configuration mentioned above. The Docker Compose file will use these variables.

2. **Build and start containers**
   ```bash
   npm run docker:build  # Build Docker images
   npm run docker:start  # Start all services
   ```

3. **Access the API**
   
   The API will be available at `http://localhost:3000`

4. **Stop the services**
   ```bash
   npm run docker:stop
   ```

## Database Support

This application supports both MongoDB and SQL databases (PostgreSQL):

- **MongoDB**: Default configuration for document storage
- **PostgreSQL**: Relational database alternative 

To switch between databases, modify the `DB_TYPE` environment variable in your `.env` file:
```
DB_TYPE=mongo  # For MongoDB
DB_TYPE=sql    # For PostgreSQL
```

## API Documentation

### Authentication

**POST /auth/login**
- Request body: `{ "username": "string", "password": "string" }`
- Response: `{ "success": true, "token": "JWT_TOKEN", "message": "Login successful" }`

### Quiz Generation

**POST /quiz/generate**
- Header: `Authorization: Bearer JWT_TOKEN`
- Request body:
```json
{
  "grade": 10,
  "subject": "Mathematics",
  "totalQuestions": 5,
  "maxScore": 10,
  "difficulty": "MEDIUM"
}
```

### Quiz Submission

**POST /quiz/:id/submit**
- Header: `Authorization: Bearer JWT_TOKEN`
- Request body:
```json
{
  "responses": [
    {
      "questionId": "questionId1",
      "userResponse": "Option A"
    },
    ...
  ],
  "sendEmail": true,
  "email": "student@example.com"  // Optional email to send results
}
```

### Quiz History

**GET /quiz/history**
- Header: `Authorization: Bearer JWT_TOKEN`
- Query parameters:
  - `grade` (optional): Filter by grade level
  - `subject` (optional): Filter by subject
  - `from` (optional): Start date (YYYY-MM-DD)
  - `to` (optional): End date (YYYY-MM-DD)

### Question Hints

**GET /quiz/:id/question/:questionId/hint**
- Header: `Authorization: Bearer JWT_TOKEN`
- Response: `{ "hint": "This is a helpful hint..." }`

### Quiz Retry

**POST /quiz/:id/retry**
- Header: `Authorization: Bearer JWT_TOKEN`
- Response: Original quiz questions ready for retrying

### View Submissions

**GET /quiz/:id/submissions**
- Header: `Authorization: Bearer JWT_TOKEN`
- Response: List of all submissions for the quiz

**GET /quiz/:id/submissions/:submissionId**
- Header: `Authorization: Bearer JWT_TOKEN`
- Response: Detailed results of a specific submission

### Email Notification Features

**Submit Quiz with Email Notification**
- **POST /quiz/:id/submit** 
- Include email parameters in the request:
```json
{
  "responses": [...],
  "sendEmail": true,
  "email": "student@example.com"
}
```
- The email will include quiz results and AI-generated improvement suggestions

**Send Email for Past Quiz Submission**
- **POST /quiz/:id/email-results**
- Request body:
```json
{
  "email": "student@example.com",
  "submissionIndex": 0  // Optional, defaults to latest submission if not provided
}
```
- Sends a formatted email with quiz results and AI-generated suggestions to the provided email address
- The email includes:
  - Quiz score and overall assessment
  - Subject and grade level information
  - AI-generated improvement suggestions

## Technical Implementation

### Technologies Used

- Node.js and Express for the API
- MongoDB / PostgreSQL for data storage
- Redis for caching
- Groq API for AI-powered quiz generation and evaluation
- JWT for authentication
- Nodemailer for email notifications
- Docker for containerization

## Deployment

### Cloud Deployment Options

1. **Heroku**
   - Install Heroku CLI
   - Set up environment variables in Heroku dashboard
   - Deploy using Git:
   ```bash
   heroku login
   heroku create ai-quizzer-api
   git push heroku main
   ```

2. **AWS**
   - Use Elastic Beanstalk or ECS for container deployment
   - Set up MongoDB Atlas or AWS RDS for database
   - Configure ElastiCache for Redis

3. **DigitalOcean**
   - Use App Platform or Kubernetes
   - Add MongoDB or PostgreSQL database
   - Add Redis cache

## Testing

Use the included Postman Collection for manual testing:
1. Import the file `postman/ai_quizzer_collection.json` into Postman
2. Use the Login endpoint to get a JWT token
3. Use the token for all authenticated requests

## License

[Specify your license information here]
